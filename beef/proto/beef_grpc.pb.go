// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: beef.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BeefService_GetAllBeef_FullMethodName = "/beef.BeefService/GetAllBeef"
)

// BeefServiceClient is the client API for BeefService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BeefServiceClient interface {
	GetAllBeef(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllBeefResponse], error)
}

type beefServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeefServiceClient(cc grpc.ClientConnInterface) BeefServiceClient {
	return &beefServiceClient{cc}
}

func (c *beefServiceClient) GetAllBeef(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetAllBeefResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BeefService_ServiceDesc.Streams[0], BeefService_GetAllBeef_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[empty.Empty, GetAllBeefResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BeefService_GetAllBeefClient = grpc.ServerStreamingClient[GetAllBeefResponse]

// BeefServiceServer is the server API for BeefService service.
// All implementations must embed UnimplementedBeefServiceServer
// for forward compatibility.
type BeefServiceServer interface {
	GetAllBeef(*empty.Empty, grpc.ServerStreamingServer[GetAllBeefResponse]) error
	mustEmbedUnimplementedBeefServiceServer()
}

// UnimplementedBeefServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBeefServiceServer struct{}

func (UnimplementedBeefServiceServer) GetAllBeef(*empty.Empty, grpc.ServerStreamingServer[GetAllBeefResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllBeef not implemented")
}
func (UnimplementedBeefServiceServer) mustEmbedUnimplementedBeefServiceServer() {}
func (UnimplementedBeefServiceServer) testEmbeddedByValue()                     {}

// UnsafeBeefServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BeefServiceServer will
// result in compilation errors.
type UnsafeBeefServiceServer interface {
	mustEmbedUnimplementedBeefServiceServer()
}

func RegisterBeefServiceServer(s grpc.ServiceRegistrar, srv BeefServiceServer) {
	// If the following call pancis, it indicates UnimplementedBeefServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BeefService_ServiceDesc, srv)
}

func _BeefService_GetAllBeef_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeefServiceServer).GetAllBeef(m, &grpc.GenericServerStream[empty.Empty, GetAllBeefResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BeefService_GetAllBeefServer = grpc.ServerStreamingServer[GetAllBeefResponse]

// BeefService_ServiceDesc is the grpc.ServiceDesc for BeefService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BeefService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "beef.BeefService",
	HandlerType: (*BeefServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllBeef",
			Handler:       _BeefService_GetAllBeef_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beef.proto",
}
